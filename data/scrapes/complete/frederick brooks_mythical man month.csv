quoteText,bookTitle,bookAuthor,tags
"Adding manpower to a late software project, makes it later.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Systems program building is an entropy-decreasing process, hence inherently metastable. Program maintenance is an entropy-increasing process, and even its most skillful execution only delays the subsidence of the system into unfixable obsolescence.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"As time passes, the system becomes less and less well-ordered. Sooner or later the fixing cease to gain any ground. Each forward step is matched by a backward one. Although in principle usable forever, the system has worn out as a base for progress. ...A brand-new, from-the-ground-up redesign is necessary.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"The general tendency is to over-design the second system, using all the ideas and frills that were cautiously sidetracked on the first one.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"A baseball manager recognizes a nonphysical talent, hustle, as an essential gift of great players and great teams. It is the characteristic of running faster than necessary, moving sooner than necessary, trying harder than necessary. It is essential for great programming teams, too.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks,['management']
"The management question, therefore, is not whether to build a pilot system and throw it away. You will do that. The only question is whether to plan in advance to build a throwaway, or to promise to deliver the throwaway to customers.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"The programmer, like the poet, works only slightly removed from pure thought-stuff. He builds his castles in the air, from air, creating by exertion of the imagination.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Einstein repeatedly argued that there must be simplified explanations of nature, because God is not capricious or arbitrary. No such faith comforts the software engineer.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,"['brooks', 'einstein', 'programming', 'software-development', 'software-engineering']"
Men and months are interchangeable commodities only when a task can be partitioned among many workers with no communication among them (Fig. 2.1). This is true of reaping wheat or picking cotton; it is not even approximately true of systems programming.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"For the human makers of things, the incompletenesses and inconsistencies of our ideas become clear only during implementation.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
The challenge and the mission are to find real solutions to real problems on actual schedules with available resources.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
A basic principle of data processing teaches the folly of trying to maintain independent files in synchonism.,The Mythical Man-Month: Essays on Software Engineering,Frederick Phillips Brooks,"['architecture', 'documentation', 'maintenance']"
"By documenting a design, the designer exposes himself to the criticisms of everyone, and he must be able to defend everything he writes. If the organizational structure is threatening in any way, nothing is going to be documented until it is completely defensible.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"An omelette, promised in two minutes, may appear to be progressing nicely. But when it has not set in two minutes, the customer has two choices—wait or eat it raw. Software customers have had the same choices. The cook has another choice; he can turn up the heat. The result is often an omelette nothing can save—burned in one part, raw in another.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
Organizations which design systems are constrained to produce systems which are copies of the communication structures of these organizations.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Conceptual integrity in turn dictates that the design must proceed from one mind, or from a very small number of agreeing resonant minds.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
Adding manpower to a late software project makes it later.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"In fact, flow charting is more preached than practiced. I have never seen an experienced programmer who routinely made detailed flow charts before beginning to write programs",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Today I am more convinced than ever. Conceptual integrity is central to product quality. Having a system architect is the most important single step toward conceptual integrity. These principles are by no means limited to software systems, but to the design of any complex construct, whether a computer, an airplane, a Strategic Defense Initiative, a Global Positioning System. After teaching a software engineering laboratory more than 20 times, I came to insist that student teams as small as four people choose a manager and a separate architect. Defining distinct roles in such small teams may be a little extreme, but I have observed it to work well and to contribute to design success even for small teams.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,['software-development']
"Adjusting to the requirement for perfection is, I think, the most difficult part of learning to program.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Observe that for the programmer, as for the chef, the urgency of the patron may govern the scheduled completion of the task, but it cannot govern the actual completion.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Study after study shows that the very best designers produce structures that are faster, smaller, simpler, cleaner, and produced with less effort. The differences between the great and the average approach an order of magnitude.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"...give a great deal of attention to keeping his managers and his technical people as interchangeable as their talents allow. The barriers are sociological... To overcome this problem some laboratories, such as Bell Labs, abolish all job titles. Each professional employee is a ""member of technical staff.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,['definitive']
"Architecture must be carefully distinguished from implementation. As Blaauw has said, ""Where architecture tells what happens, implementation tells how it is made to happen.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
How does a project get to be a year late? . . . . One day at a time.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"First, one must perform perfectly. The computer resembles the magic of legend in this respect, too. If one character, one pause, of the incantation is not strictly in proper form, the magic doesn't work. Human beings are not accustomed to being perfect, and few areas of human activity demand it. Adjusting to the requirement for perfection is, I think, the most difficult part of learning to program.[1]",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Because ease of use is the purpose, this ratio of function to conceptual complexity is the ultimate test of system design. Neither function alone nor simplicity alone defines a good design. This point is widely misunderstood. Operating System/360 is hailed by its builders as the finest ever built, because it indisputably has the most function. Function, and not simplicity, has always been the measure of excellence for its designers. On the other hand, the Time-Sharing System for the PDP-10 is hailed by its builders as the finest, because of its simplicity and the spareness of its concepts. By any measure, however, its function is not even in the same class as that of OS/360. As soon as ease of use is held up as the criterion, each of these is seen to be unbalanced, reaching for only half of the true goal.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"By the architecture of a system, I mean the complete and detailed specification of the user interface. For a computer this is the programming manual. For a compiler it is the language manual. For a control program it is the manuals for the language or languages used to invoke its functions. For the entire system it is the union of the manuals the user must consult to do his entire job. The architect of a system, like the architect of a building, is the user's agent. It is his job to bring professional and technical knowledge to bear in the unalloyed interest of the user, as opposed to the interests of the salesman, the fabricator, etc.[2] Architecture must be carefully distinguished from implementation. As Blaauw has said, ""Where architecture tells what happens, implementation tells how it is made to happen.""[3] He gives as a simple example a clock, whose architecture consists of the face, the hands, and the winding knob. When a child has learned this architecture, he can tell time as easily from a wristwatch as from a church tower. The implementation, however, and its realization, describe what goes on inside the case—powering by any of many mechanisms and accuracy control by any of many.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"An architect's first work is apt to be spare and clean. He knows he doesn't know what he's doing, so he does it carefully and with great restraint.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Peopleware. A major contribution during recent years has been DeMarco and Lister's 1987 book, Peopleware: Productive Projects and Teams. Its underlying thesis is that ""The major problems of our work are not so much technological as sociological in nature."" It abounds with gems such as, ""The manager's function is not to make people work, it is to make it possible for people to work."" It deals with such mundane topics as space, furniture, team meals together. DeMarco and Lister provide real data from their Coding War Games that show stunning correlation between performances of programmers from the same organization, and between workplace characteristics and both productivity and defect levels. The top performers' space is quieter, more private, better protected against interruption, and there is more of it. . . . Does it really matter to you . . . whether quiet, space, and privacy help your current people to do better work or [alternatively] help you to attract and keep better people?[19]",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Conway's Law predicts: ""Organizations which design systems are constrained to produce systems which are copies of the communication structures of these organizations.""[1] Conway goes on to point out that the organization chart will initially reflect the first system design, which is almost surely not the right one. If the system design is to be free to change, the organization must be prepared to change.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Years later, when I got to college, I learned about an important theory of psychology called Learned Helplessness, developed by Dr. Martin E. P. Seligman. This theory, backed up by years of research, is that a great deal of depression grows out of a feeling of helplessness: the feeling that you cannot control your environment.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,['software-development']
"When a child has learned this architecture, he can tell time as easily from a wristwatch as from a church tower.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Program maintenance involves no cleaning, lubrication, or repair of deterioration. It consists chiefly of changes that repair design defects. Much more often than with hardware, these changes include added functions. Usually they are visible to the user. The total cost of maintaining a widely used program is typically 40 percent or more of the cost of developing it. Surprisingly, this cost is strongly affected by the number of users. More users find more bugs.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Any attempt to fix it with minimum effort will repair the local and obvious, but unless the structure is pure or the documentation very fine, the far-reaching effects of the repair will be overlooked. Second, the repairer is usually not the man who wrote the code, and often he is a junior programmer or trainee.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"It is more important that milestones be sharp-edged and unambiguous than that they be easily verifiable by the boss. Rarely will a man lie about milestone progress, if the milestone is so sharp that he can't deceive himself. But if the milestone is fuzzy, the boss often understands a different report from that which the man gives.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Reducing the role conflict. The boss must first distinguish between action information and status information. He must discipline himself not to act on problems his managers can solve, and never to act on problems when he is explicitly reviewing status.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Digital computers are themselves more complex than most things people build; they have very large numbers of states. This makes conceiving, describing, and testing them hard. Software systems have orders of magnitude more states than computers do. Likewise, a scaling-up of a software entity is not merely a repetition of the same elements in larger size; it is necessarily an increase in the number of different elements. In most cases, the elements interact with each other in some nonlinear fashion, and the complexity of the whole increases much more than linearly. The complexity of software is an essential property, not an accidental one.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
More software projects have gone awry for lack of calendar time than for all other causes combined.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
Why is programming fun? What delights may its practitioner expect as his reward?,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,"['code', 'development', 'programming', 'software']"
"To only a fraction of the human race does God give the privilege of earning one's bread doing what one would have gladly pursued free, for passion. I am very thankful.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
Simplicity and straightforwardness proceed from conceptual integrity.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"For the human makers of things, the incompletenesses and inconsistencies of our ideas become clear only during implementation. Thus it is that writing, experimentation, ""working out"" are essential disciplines for the theoretician.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Especially noteworthy is his comment that new people added late in a development project must be team players willing to pitch in and work within the process, and not attempt to alter or improve the process itself!",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
Organizations must be designed around the people available; not people fitted into pure-theory organizations.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,['business-advice']
"I believe the hard part of building software to be the specification, design, and testing of this conceptual construct, not the labor of representing it and testing the fidelity of the representation. We still make syntax errors, to be sure; but they are fuzz compared to the conceptual errors in most systems.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Parnas argues strongly that the goal of everyone seeing everything is totally wrong; parts should be encapsulated so that no one needs to or is allowed to see the internals of any parts other than his own, but should see only the interfaces. 7.15 Parnas's proposal is a recipe for disaster. [I have been quite convinced otherwise by Parnas, and totally changed my mind.]",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
Never go to sea with two chronometers; take one or three.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
Vocabulary learning constitutes no small part of the intellectual barrier to reuse.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"So far, so good. The problem, however, is how to build things that today take 5000 man-years, not things that take 20 or 30.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
Underestimates do not change significantly during the activity until about three weeks before the scheduled completion.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"We need research to appropriate for the software reuse problem the large body of knowledge as to how people acquire language. Some of the lessons are immediately obvious: • People learn in sentence contexts, so we need to publish many examples of composed products, not just libraries of parts. • People do not memorize anything but spelling. They learn syntax and semantics incrementally, in context, by use. • People group word composition rules by syntactic classes, not by compatible subsets of objects.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
Extrapolation of times for the hundred-yard dash shows that a man can run a mile in under three minutes.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"On another project the best engineering manager I ever saw served often as a giant flywheel, his inertia damping the fluctuations that came from market and management people.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"The hard thing about building software is deciding what to say, not saying it. No facilitation of expression can give more than marginal gains.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"One can visualize a debugging assistant that offers very generalized suggestions at first, but as more and more system structure is embodied in the rule base, becomes more and more particular in the hypotheses it generates and the tests it recommends.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"But a written program has another face, that which tells its story to the human user. For even the most private of programs, some such communication is necessary; memory will fail the author-user, and he will require refreshing on the details of his handiwork.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"The solution, I think, is to merge the files, to incorporate the documentation in the source program. This is at once a powerful incentive toward proper maintenance, and an insurance that the documentation will always be handy to the program user. Such programs are called self-documenting.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"I do not believe we will find the magic here. Program verification is a very powerful concept, and it will be very important for such things as secure operating system kernels. The technology does not promise, however, to save labor. Verifications are so much work that only a few substantial programs have ever been verified. Program verification does not mean error-proof programs. There is no magic here, either. Mathematical proofs also can be faulty. So whereas verification might reduce the program-testing load, it cannot eliminate it. More seriously, even perfect program verification can only establish that a program meets its specification. The hardest part of the software task is arriving at a complete and consistent specification, and much of the essence of building a program is in fact the debugging of the specification.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Adjusting to the requirement for perfection is, I think, the most difficult part of learning to program.[1]",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"The programmer builds from pure thought-stuff: concepts and very flexible representations thereof. Because the medium is tractable, we expect few difficulties in implementation; hence our pervasive optimism. Because our ideas are faulty, we have bugs; hence our optimism is unjustified.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Our project had not been under way six months before we hit another problem. The workbook was about five feet thick! If we had stacked up the 100 copies serving programmers in our offices in Manhattan's Time-Life Building, they would have towered above the building itself. Furthermore, the daily change distribution averaged two inches, some 150 pages to be interfiled in the whole. Maintenance of the workbook began to take a significant time from each workday.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"In the seminal high-tech book The Mythical Man-Month, IBM veteran and computer science professor Frederick Brooks argued that adding manpower to complex software projects actually delayed progress. One reason was that the time and money spent on communication increased in proportion to the number of people on a project.",The Everything Store: Jeff Bezos and the Age of Amazon,Brad Stone,[]
Programming then is fun because it gratifies creative longings built deep within us and delights sensibilities we have in common with all men.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"On balance I think the microfiche was a very happy mechanism, and I would recommend it over a paper workbook for very large projects.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Why Have Formal Documents? First, writing the decisions down is essential. Only when one writes do the gaps appear and the inconsistencies protrude. The act of writing turns out to require hundreds of mini-decisions, and it is the existence of these that distinguishes clear, exact policies from fuzzy ones. Second, the documents will communicate the decisions to others. The manager will be continually amazed that policies he took for common knowledge are totally unknown by some member of his team.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"If there are n workers on a project, there are (n2–n)/2 interfaces across which there may be communication, and there are potentially almost 2n teams within which coordination must occur. The purpose of organization is to reduce the amount of communication and coordination necessary; hence organization is a radical attack on the communication problems treated above. The means by which communication is obviated are division of labor and specialization of function. The tree-like structure of organizations reflects the diminishing need for detailed communication when division and specialization of labor are applied.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Finally, a manager's documents give him a data base and checklist. By reviewing them periodically he sees where he is, and he sees what changes of emphasis or shifts in direction are needed.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
The job done least well by project managers is to utilize the technical genius who is not strong on management talent.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Structuring an organization for change is much harder than designing a system for change. Each man must be assigned to jobs that broaden him, so that the whole force is technically flexible.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
The fundamental problem with program maintenance is that fixing a defect has a substantial (20–50 percent) chance of introducing another. So the whole process is two steps forward and one step back.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"It is more important that milestones be sharp-edged and unambiguous than that they be easily verifiable by the boss. Rarely will a man lie about milestone progress, if the milestone is so sharp that he can't deceive himself. But if the milestone is fuzzy, the boss often understands a different report from that which the man gives. To supplement Sophocles, no one enjoys bearing bad news, either, so it gets softened without any real intent to deceive.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Lehman and Belady have studied the history of successive releases in a large operating system.[6] They find that the total number of modules increases linearly with release number, but that the number of modules affected increases exponentially with release number. All repairs tend to destroy the structure, to increase the entropy and disorder of the system. Less and less effort is spent on fixing original design flaws; more and more is spent on fixing flaws introduced by earlier fixes. As time passes, the system becomes less and less well-ordered. Sooner or later the fixing ceases to gain any ground. Each forward step is matched by a backward one. Although in principle usable forever, the system has worn out as a base for progress. Furthermore, machines change, configurations change, and user requirements change, so the system is not in fact usable forever. A brand-new, from-the-ground-up redesign is necessary.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"I believe the hard part of building software to be the specification, design, and testing of this conceptual construct, not the labor of representing it and testing the fidelity of the representation. We still make syntax errors, to be sure; but they are fuzz compared to the conceptual errors in most systems. If this is true, building software will always be hard. There is inherently no silver bullet.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"the disaster is due to termites, not tornadoes; and the schedule has slipped imperceptibly but inexorably.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"It seems that in all fields, however, the jobs where things get done never have formal authority commensurate with responsibility.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
Buy versus build. The most radical possible solution for constructing software is not to construct it at all.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"The opportunity to be creative and inventive in implementation is not significantly diminished by working within a given external specification, and the order of creativity may even be enhanced by that discipline.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Even at a cost of $100,000, a purchased piece of software is costing only about as much as one programmer-year. And delivery is immediate! Immediate at least for products that really exist, products whose developer can refer the prospect to a happy user. Moreover, such products tend to be much better documented and somewhat better maintained than homegrown software. The development of the mass market is, I believe, the most profound long-run trend in software engineering. The cost of software has always been development cost, not replication cost. Sharing that cost among even a few users radically cuts the per-user cost. Another way of looking at it is that the use of n copies of a software system effectively multiplies the productivity of its developers by n. That is an enhancement of the productivity of the discipline and of the nation.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"The big change has been in the hardware/software cost ratio. The buyer of a $2-million machine in 1960 felt that he could afford $250,000 more for a customized payroll program, one that slipped easily and nondisruptively into the computer-hostile social environment. Buyers of $50,000 office machines today cannot conceivably afford customized payroll programs; so they adapt their payroll procedures to the packages available.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Therefore the most important function that software builders do for their clients is the iterative extraction and refinement of the product requirements. For the truth is, the clients do not know what they want. They usually do not know what questions must be answered, and they almost never have thought of the problem in the detail that must be specified. Even the simple answer—""Make the new software system work like our old manual information-processing system""—is in fact too simple. Clients never want exactly that. Complex software systems are, moreover, things that act, that move, that work. The dynamics of that action are hard to imagine. So in planning any software activity, it is necessary to allow for an extensive iteration between the client and the designer as part of the system definition.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"If, as I believe, the conceptual structures we construct today are too complicated to be accurately specified in advance, and too complex to be built faultlessly, then we must take a radically different approach. Let us turn to nature and study complexity in living things, instead of just the dead works of man. Here we find constructs whose complexities thrill us with awe. The brain alone is intricate beyond mapping, powerful beyond imitation, rich in diversity, self-protecting, and self-renewing. The secret is that it is grown, not built. So it must be with our software systems. Some years ago Harlan Mills proposed that any software system should be grown by incremental development.[11] That is, the system should first be made to run, even though it does nothing useful except call the proper set of dummy subprograms. Then, bit by bit it is fleshed out, with the subprograms in turn being developed into actions or calls to empty stubs in the level below. I have seen the most dramatic results since I began urging this technique on the project builders in my software engineering laboratory class. Nothing in the past decade has so radically changed my own practice, or its effectiveness. The approach necessitates top-down design, for it is a top-down growing of the software. It allows easy backtracking. It lends itself to early prototypes. Each added function and new provision for more complex data or circumstances grows organically out of what is already there. The morale effects are startling. Enthusiasm jumps when there is a running system, even a simple one. Efforts redouble when the first picture from a new graphics software system appears on the screen, even if it is only a rectangle. One always has, at every stage in the process, a working system. I find that teams can grow much more complex entities in four months than they can build.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"I have long enjoyed asking candidate programmers, ""Where is next November?"" If the question is too cryptic, then, ""Tell me about your mental model of the calendar."" The really good programmers have strong spatial senses; they usually have geometric models of time; and they quite often understand the first question without elaboration. They have highly individualistic models.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Power tools for the mind. The most dramatic way to improve the productivity of management information systems (MIS) programmers is to go down to your local computer store and buy off the shelf what they would have built. This is not ridiculous; the availability of cheap, powerful shrink-wrapped software has met many needs that formerly would have occasioned custom packages. These power tools for the mind are more like electric drills, saws, and sanders than they are like big complex production tools.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
Any product that is sufficiently big or urgent to require the effort of many minds thus encounters a peculiar difficulty: the result must be conceptually coherent to the single mind of the user and at the same time designed by many minds.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"The success of the scaling-up process depends upon the fact that the conceptual integrity of each piece has been radically improved—that the number of minds determining the design has been divided by seven. So it is possible to put 200 people on a problem and face the problem of coordinating only 20 minds, those of the surgeons. For that coordination problem, however, separate techniques must be used, and these are discussed in succeeding chapters. Let it suffice here to say that the entire system also must have conceptual integrity, and that requires a system architect to design it all, from the top down. To make that job manageable, a sharp distinction must be made between architecture and implementation, and the system architect must confine himself scrupulously to architecture.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Third, enumerating the frequencies explicitly helps everyone recognize which decisions depend upon which user set properties. Even this sort of informal sensitivity analysis is valuable. When it develops that very important decisions are hinging on some particular guess, then it is worth the cost to establish better estimates for that value.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
To summarize: write down explicit guesses for the attributes of the user set. It is far better to be explicit and wrong than to be vague.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"I will contend that conceptual integrity is the most important consideration in system design. It is better to have a system omit certain anomalous features and improvements, but to reflect one set of design ideas, than to have one that contains many good but independent and uncoordinated ideas.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Indeed, the cost-performance ratio of the product will depend most heavily on the implementer, just as ease of use depends most heavily on the architect.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"it sprang from a conviction that the quality of the people on a project, and their organization and management, are much more important factors in success than are the tools they use or the technical approaches they take. Subsequent researches have supported that conviction. Boehm's COCOMO model finds that the quality of the team is by far the largest factor in its success, indeed four times more potent than the next largest factor.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Conceptual integrity does require that a system reflect a single philosophy and that the specification as seen by the user flow from a few minds. Because of the real division of labor into architecture, implementation, and realization, however, this does not imply that a system so designed will take longer to build. Experience shows the opposite, that the integral system goes together faster and takes less time to test. In effect, a widespread horizontal division of labor has been sharply reduced by a vertical division of labor, and the result is radically simplified communications and improved conceptual integrity.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"The large organization will consist of many semi-autonomous units, which we may call quasi-firms. Each of them will have a large amount of freedom, to give the greatest possible chance to creativity and entrepreneurship. . . . Each quasi-firm must have both a profit and loss account, and a balance sheet.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"The computer has brought a similar fluidity to many other media: artistic drawings, building plans, mechanical drawings, musical compositions, photographs, video sequences, slide presentations, multimedia works, and even to spreadsheets. In each case, the manual method of production required recopying the bulky unchanged parts in order to see changes in context. Now we enjoy for each medium the same benefits that time-sharing brought to software creation—the ability to revise and to assess instantly the effect without losing one's train of thought.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Radically better software robustness and productivity are to be had only by moving up a level, and making programs by the composition of modules, or objects. An especially promising trend is the use of mass-market packages as the platforms on which richer and more customized products are built. A truck-tracking system is built on a shrink-wrapped database and communications package; so is a student information system. The want ads in computer magazines offer hundreds of Hypercard stacks and customized templates for Excel, dozens of special functions in Pascal for MiniCad or functions in AutoLisp for AutoCad.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"This really does attack essence. Because the build-on-package phenomenon does not today affect the average MIS programmer, it is not yet very visible to the software engineering discipline. Nevertheless, it will grow rapidly, because it does attack the essence of fashioning conceptual constructs. The shrink-wrapped package provides a big module of function, with an elaborate but proper interface, and its internal conceptual structure does not have to be designed at all. High-function software products such as Excel or 4th Dimension are big modules indeed, but they serve as known, documented, tested modules with which to build customized systems. Next-level application builders get richness of function, a shorter development time, a tested component, better documentation, and radically lower cost. The difficulty, of course, is that the shrink-wrapped software package is designed as a stand-alone entity whose functions and interfaces metaprogrammers cannot change. Moreover, and more seriously, shrink-wrapped package builders seemingly have little incentive to make their products suitable as modules in a larger system. I",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"The metaprogrammer who uses one, or especially several, applications as components in a larger system. This is the user whose needs are poorly met today. This is also the use which promises substantial effectiveness gains in building new applications.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"The programmer at wit's end for lack of space can often do best by disentangling himself from his code, rearing back, and contemplating his data. Representation is the essence of programming.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"I believe that large programming projects suffer management problems different in kind from small ones, due to division of labor. I believe the critical need to be the preservation of the conceptual integrity of the product itself.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"And so from a statistical mechanical model, Belady and Lehman arrive for programming-systems at a more general conclusion supported by the experience of all the earth. ""Things are always at their best in the beginning,"" said Pascal. C. S.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"And so from a statistical mechanical model, Belady and Lehman arrive for programming-systems at a more general conclusion supported by the experience of all the earth. ""Things are always at their best in the beginning,"" said Pascal.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Finally, there is the delight of working in such a tractable medium. The programmer, like the poet, works only slightly removed from pure thought-stuff. He builds his castles in the air, from air, creating by exertion of the imagination. Few media of creation are so flexible, so easy to polish and rework, so readily capable of realizing grand conceptual structures. (As we shall see later, this very tractability has its own problems.) Yet the program construct, unlike the poet's words, is real in the sense that it moves and works, producing visible outputs separate from the construct itself. It prints results, draws pictures, produces sounds, moves arms. The magic of myth and legend has come true in our time. One types the correct incantation on a keyboard, and a display screen comes to life, showing things that never were nor could be.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
the conceptual integrity of a system determines its ease of use.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Fifth, when schedule slippage is recognized, the natural (and traditional) response is to add manpower. Like dousing a fire with gasoline, this makes matters worse, much worse. More fire requires more gasoline, and thus begins a regenerative cycle which ends in disaster.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Nothing even convincing, much less exciting, has yet emerged from such efforts. I am persuaded that nothing will.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Oversimplifying outrageously, we state Brooks's Law: Adding manpower to a late software project makes it later. This then is the demythologizing of the man-month. The number of months of a project depends upon its sequential constraints. The maximum number of men depends upon the number of independent subtasks. From these two quantities one can derive schedules using fewer men and more months.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"For it to be successful, the architect must • remember that the builder has the inventive and creative responsibility for the implementation; so the architect suggests, not dictates; • always be prepared to suggest a way of implementing anything he specifies, and be prepared to accept any other way that meets the objectives as well; • deal quietly and privately in such suggestions; • be ready to forego credit for suggested improvements. Normally the builder will counter by suggesting changes to the architecture. Often he is right—some minor feature may have unexpectedly large costs when the implementation is worked out.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"The manual, or written specification, is a necessary tool, though not a sufficient one. The manual is the external specification of the product. It describes and prescribes every detail of what the user sees.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"The manual, or written specification, is a necessary tool, though not a sufficient one. The manual is the external specification of the product. It describes and prescribes every detail of what the user sees. As such, it is the chief product of the architect.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"The programmed computer has all the fascination of the pinball machine or the jukebox mechanism, carried to the ultimate. Fourth",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"The brain alone is intricate beyond mapping, powerful beyond imitation, rich in diversity, self-protecting, and self-renewing. The secret is that it is grown, not built. So it must be with our software systems.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Observe that for the programmer, as for the chef, the urgency of the patron may govern the scheduled completion of the task, but it cannot govern the actual completion. An omelette, promised in two minutes, may appear to be progressing nicely. But when it has not set in two minutes, the customer has two choices—wait or eat it raw. Software customers have had the same choices. The",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Fostering a total-system, user-oriented attitude may well be the most important function of the programming manager.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Hustle provides the cushion, the reserve capacity, that enables a team to cope with routine mishaps, to anticipate and forfend minor calamities. The calculated response, the measured effort, are the wet blankets that dampen hustle. As we have seen, one must get excited about a one-day slip. Such are the elements of catastrophe.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"A computer program is a message from a man to a machine. The rigidly marshaled syntax and the scrupulous definitions all exist to make intention clear to the dumb engine. But a written program has another face, that which tells its story to the human user. For even the most private of programs, some such communication is necessary; memory will fail the author-user, and he will require refreshing on the details of his handiwork. How much more vital is the documentation for a public program, whose user is remote from the author in both time and space! For the program product, the other face to the user is fully as important as the face to the machine. Most of us have quietly excoriated the remote and anonymous author of some skimpily documented program. And many of us have therefore tried to instill in new programmers an attitude about documentation that would inspire for a lifetime, overcoming sloth and schedule pressure. By and large we have failed. I think we have used wrong methods.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Second, our estimating techniques fallaciously confuse effort with progress, hiding the assumption that men and months are interchangeable.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Cosgrove has perceptively pointed out that the programmer delivers satisfaction of a user need rather than any tangible product. And both the actual need and the user's perception of that need will change as programs are built, tested, and used.[3]",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Very good professional programmers are ten times as productive as poor ones, at same training and two-year experience level.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"The industry is changing now, as many small companies are being acquired by larger ones. It remains to be seen if the larger acquirers will understand the importance of preserving the creativity of smallness.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"This great church is an incomparable work of art. There is neither aridity nor confusion in the tenets it sets forth. . . . It is the zenith of a style, the work of artists who had understood and assimilated all their predecessors' successes, in complete possession of the techniques of their times, but using them without indiscreet display nor gratuitous feats of skill. It was Jean d'Orbais who undoubtedly conceived the general plan of the building, a plan which was respected, at least in its essential elements, by his successors. This is one of the reasons for the extreme coherence and unity of the edifice. —REIMS CATHEDRAL GUIDEBOOK[1] Conceptual",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Ease of use is enhanced only if the time gained in functional specification exceeds the time lost in learning, remembering, and searching manuals.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
conceptual integrity of a system determines its ease of use. Good features and ideas that do not integrate with a system's basic concepts are best left out.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Another important set of new ideas for designing the bugs out of programs derives largely from Dijkstra,[3] and is built on a theoretical structure by B öhm and Jacopini.[4] Basically the approach is to design programs whose control structures consist only of loops defined by a statement such as DO WHILE, and conditional portions delineated into groups of statements marked with brackets and conditioned by an IF . . . THEN . . . ELSE. B öhm and Jacopini show these structures to be theoretically sufficient; Dijkstra argues that the alternative, unrestrained branching via GO TO, produces structures that lend themselves to logical errors. The basic notion is surely sound.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Falkoff, A. D., K. E. Iverson, E. H. Sussenguth, ""A formal description of System/360,"" IBM Systems Journal, 3, 3 (1964), pp. 198–261.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"First, writing the decisions down is essential. Only when one writes do the gaps appear and the inconsistencies protrude. The act of writing turns out to require hundreds of mini-decisions, and it is the existence of these that distinguishes clear, exact policies from fuzzy ones. Second, the documents will communicate the decisions to others. The manager will be continually amazed that policies he took for common knowledge are totally unknown by some member of his team. Since his fundamental job is to keep everybody going in the same direction, his chief daily task will be communication, not decision-making, and his documents will immensely lighten this load.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"But for any particular set of options, a more monolithic program would take less space. It's rather like a car; if the map light, cigarette lighter, and clock are priced together as a single option, the package will cost less than if one can choose each separately.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"The magic of myth and legend has come true in our time. One types the correct incantation on a keyboard, and a display screen comes to life, showing things that never were nor could be.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
testing is usually the most mis-scheduled part of programming.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
The number of months of a project depends upon its sequential constraints. The maximum number of men depends upon the number of independent subtasks.,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Good cooking takes time. If you are made to wait, it is to serve you better, and to please you.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
The means by which communication is obviated are division of labor and specialization of function. The tree-like structure of organizations reflects the diminishing need for detailed communication when division and specialization of labor are applied,The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Now I do not think software managers have less inherent courage and firmness than chefs, nor than other engineering managers. But false scheduling to match the patron's desired date is much more common in our discipline than elsewhere in engineering. It is very difficult to make a vigorous, plausible, and job-risking defense of an estimate that is derived by no quantitative method, supported by little data, and certified chiefly by the hunches of the managers. Clearly",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
"Communication and its consequent, organization, are critical for success. The techniques of communication and organization demand from the manager much thought and as much experienced competence as the software technology itself.",The Mythical Man-Month: Essays on Software Engineering,Frederick P. Brooks Jr.,[]
