quoteText,bookTitle,bookAuthor,tags
"Team Topologies provides four fundamental team types—stream-aligned, platform, enabling, and complicated-subsystem—and three core team interaction modes—collaboration, X-as-a-Service, and facilitating.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"When cognitive load isn’t considered, teams are spread thin trying to cover an excessive amount of responsibilities and domains. Such a team lacks bandwidth to pursue mastery of their trade and struggles with the costs of switching contexts.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"To avoid the too-common trap of building a platform disconnected from the needs of teams, it is essential to ensure that the platform teams have a focus on user experience (UX) and particularly developer experience (DevEx).",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"As Allan Kelly says, “software developers love building platforms and, without strong product management input, will create a bigger platform than needed.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
The most important part of the platform is that it is built for developers.”21,Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"The purpose of a platform team is to enable stream-aligned teams to deliver work with substantial autonomy. The stream-aligned team maintains full ownership of building, running, and fixing their application in production. The platform team provides internal services to reduce the cognitive load that would be required from stream-aligned teams to develop these underlying services.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"However, it is not sufficient to simply choose a team boundary a single time and expect no further changes; instead, organizations must anticipate the need for evolution of team patterns to meet business, organizational, market, technological, and personnel needs.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Loose coupling—components do not hold strong dependencies on other components ​•​High cohesion—components have clearly bounded responsibilities, and their internal elements are strongly related ​•​Clear and appropriate version compatibility ​•​Clear and appropriate cross-team testing",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Developing and operating software effectively for modern, interconnected systems and services requires organizations to consider many different dimensions. Historically, most organizations have seen software development as a kind of manufacturing to be completed by separate individuals arranged into functional specialties, with large projects planned up front and with little consideration for sociotechnical dynamics. This led to the prevailing problems depicted in Figure 1.2 on page 12.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
These capabilities include (but are not restricted to): ​•​Application security ​•​Commercial and operational viability analysis ​•​Design and architecture ​•​Development and coding ​•​Infrastructure and operability ​•​Metrics and monitoring ​•​Product management and ownership ​•​Testing and quality assurance ​•​User experience (UX),Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"In this multi-channel, highly connected context, a “product” can mean very different things, making it hard to understand what the responsibilities of a “product team” are.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"While there is no formula for cognitive load, we can assess the number and relative complexity (internal to the organization) of domains for which a given team is responsible. The Engineering Productivity team at OutSystems that we mentioned in Chapter 1 realized that the different domains they were responsible for (build and continuous integration, continuous delivery, test automation, and infrastructure automation) had caused them to become overloaded. The team was constantly faced with too much work and context switching prevailed, with tasks coming in from different product areas simultaneously. There was a general sense in the team that they lacked sufficient domain knowledge, but they had no time to invest in acquiring it. In fact, most of their cognitive load was extraneous, leaving very little capacity for value-add intrinsic or germane cognitive load. The team made a bold decision to split into microteams, each responsible for a single domain/product area: IDE productivity, platform-server productivity, and infrastructure automation. The two productivity microteams were aligned (and colocated) with the respective product areas (IDE and platform server). Changes that overlapped domains were infrequent; therefore, the previous single-team model was optimizing for the exceptions rather than the rule. With the new structure, the teams collaborated closely (even creating temporary microteams when necessary) on cross-domain issues that required a period of solution discovery but not as a permanent structure. After only a few months, the results were above their best expectations. Motivation went up as each microteam could now focus on mastering a single domain (plus they didn’t have a lead anymore, empowering team decisions). The mission for each team was clear, with less context switching and frequent intra-team communication (thanks to a single shared purpose rather than a collection of purposes). Overall, the flow and quality of the work (in terms of fitness of the solutions for product teams) increased significantly.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Site Reliability Engineering is an approach to the operation and improvement of software applications pioneered by Google to deal with their global, multi-million-user systems. If adopted in full, SRE is significantly different from IT operations of the past, due to its focus on the “error budget” (namely defining what is an acceptable amount of downtime) and the ability of SRE teams to push back on poor software.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"building and running software systems is a sociotechnical activity, not an assembly line in a factory.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
the ratio of stream-aligned teams to other kinds of teams should be between about 6:1 and 9:1.,Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
The key takeaway here is that thinking of software architecture as a standalone concept that can be designed in isolation and then implemented by any group of teams is fundamentally wrong.,Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"If the architecture of the system and the architecture of the organization are at odds, the architecture of the organization wins.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"We like to think that Team Topologies is another piece of this puzzle—in particular, having clear and fluid team structures, responsibilities, and interaction modes.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"In other words, there needs to be a split between the responsibility of designing the cloud infrastructure process (by the cloud team) and the actual provisioning and updates to application resources (by the product teams).",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"The end goal of an enabling team is to increase the autonomy of stream-aligned teams by growing their capabilities with a focus on their problems first, not the solutions per se. If an enabling team does its job well, the team that it is helping should no longer need the help from the enabling team after a few weeks or months; there should not be a permanent dependency on an enabling team.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Diane Strode and Sid Huff propose three different categories of dependency: knowledge, task, and resource dependencies.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"The problem with taking the org chart at face value is that we end up trying to architect people as if they were software, neatly keeping their communication within the accepted lines.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Reorganizations that ignore Conway’s law, team cognitive load, and related dynamics risk acting like open heart surgery performed by a child: highly destructive.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Miguel Antunes, R&D Principle Software Engineer at OutSystems, a low-code platform vendor, relayed an example of this very challenge. Their Engineering Productivity team at OutSystems was five years old. The team’s mission was to help product teams run their builds efficiently, maintain infrastructure, and improve test execution. The team kept growing and took on extra responsibilities around continuous integration (CI), continuous delivery (CD), and infrastructure automation.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"it is very ineffective (perhaps irresponsible) for organizations that build software systems to decide on the shape, responsibilities, and boundaries of teams without input from technical leaders.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Mike Cohn, one of the originators of the Scrum product-development approach, asks these questions to assess the health of inter-team communication within an organization: “Does the structure minimize the number of communication paths between teams? . . . Does the structure encourage teams to communicate who wouldn’t otherwise do so?15",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Given our skills, constraints, cultural and engineering maturity, desired software architecture, and business goals, which team topology will help us deliver results faster and safer?",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"In fact, research by Google on their own teams found that who is on the team matters less than the team dynamics; and that when it comes to measuring performance, teams matter more than individuals.3 We must, therefore, start with the team for effective software delivery. There are multiple aspects to consider and nurture: team size, team lifespan, team relationships, and team cognition.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
we mean a stable grouping of five to nine people who work toward a shared goal as a unit.,Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"The best approach to team lifespans is to keep the team stable and “flow the work to the team,",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
there needs to be a split between the responsibility of designing the cloud infrastructure process (by the cloud team) and the actual provisioning and updates to application resources (by the product teams).,Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Every part of the software system needs to be owned by exactly one team. This means there should be no shared ownership of components, libraries, or code.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Outside teams may submit pull requests or suggestions for change to the owning team, but they cannot make changes themselves.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Cognitive load was characterized in 1988 by psychologist John Sweller as “the total amount of mental effort being used in the working memory.”22 Sweller defines three different kinds of cognitive load: ​•​Intrinsic cognitive load—relates to aspects of the task fundamental to the problem space (e.g., “What is the structure of a Java class?” “How do I create a new method?”) ​•​Extraneous cognitive load—relates to the environment in which the task is being done (e.g., “How do I deploy this component again?” “How do I configure this service?”) ​•​Germane cognitive load—relates to aspects of the task that need special attention for learning or high performance (e.g., “How should this service interact with the ABC service?”)",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Change the management style by communicating goals and outcomes rather than obsessing over the “how,” what McChrystal calls “Eyes On, Hands Off” in Team of Teams.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"By empowering teams, and treating them as fundamental building blocks, individuals inside those teams move closer together to act as a team rather than just a group of people. On the other hand, by explicitly agreeing on interaction modes with other teams, expectations on behaviors become clearer and inter-team trust grows.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
Change the team working environment to help teams succeed.,Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
four fundamental team topologies: ​•​Stream-aligned team ​•​Enabling team ​•​Complicated-subsystem team ​•​Platform team,Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
Managing cognitive load through teams with clear responsibilities and boundaries is a distinguishing focus of team design in the Team Topologies approach.,Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Helping stream-aligned teams achieve this high rate of flow are enabling teams (which identify impediments and cross-team challenges, and simplify the adoption of new approaches), complicated-subsystem teams (if needed, to bring deep specialist expertise to specific parts of the system), and platform teams (which provide the underlying “substrate” on which stream-aligned teams can build and support software products and services with minimal friction).",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
The litmus test for the applicability of a fracture plane: Does the resulting architecture support more autonomous teams (less dependent teams) with reduced cognitive load (less disparate responsibilities)?,Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"In a fast-changing and challenging context, teams are more effective than groups of individuals.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Organizations should be viewed as complex and adaptive organisms rather than mechanistic and linear systems. —Naomi Stanford,",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
Organizations which design systems . . . are constrained to produce designs which are copies of the communication structures of these organizations.,Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"If the desired theoretical system architecture does not fit the organizational model, then one of the two will need to change.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Explicitly thinking about cognitive load can be a powerful tool for deciding on team size, assigning responsibilities, and establishing boundaries with other teams.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"The Agile, Lean IT, and DevOps movements helped demonstrate the enormous value of smaller, more autonomous teams that were aligned to the flow of business, developing and releasing in small, iterative cycles, and course correcting based on feedback from users.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
A fracture plane is a natural seam in the software system that allows the system to be split easily into two or more parts. This splitting of software is particularly useful with monolithic software.,Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"organization size (or software scale) and engineering maturity should influence which topologies are chosen in a DevOps context,",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
All the examples we mentioned so far highlight the importance of thinking about teams’ capabilities (or lack thereof) and how that causes dependencies between teams.,Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"In their 2012 paper, “A Taxonomy of Dependencies in Agile Software Development,” Diane Strode and Sid Huff propose three different categories of dependency: knowledge, task, and resource dependencies.14 Such a taxonomy can help pinpoint dependencies between teams and the potential constraints to the flow of work ahead of time.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"An enabling team is composed of specialists in a given technical (or product) domain, and they help bridge this capability gap. Such teams cross-cut to the stream-aligned teams and have the required bandwidth to research, try out options, and make informed suggestions on adequate tooling, practices, frameworks, and any of the ecosystem choices around the application stack.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
Enabling teams have a strongly collaborative nature; they thrive to understand the problems and shortcomings of stream-aligned teams in order to provide effective guidance.,Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
". After the new skills and understanding have been embedded in the stream-aligned team, the enabling team will stop daily interaction with the stream-aligned team, switching their focus to a different team.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Enabling teams and CoP can co-exist because they have slightly different purposes and dynamics: an enabling team is a small, long-lived group of specialists focused on building awareness and capability for a single team (or a small number of teams) at any one point in time, whereas a CoP usually seeks to have more widespread effects, diffusing knowledge across many teams. Of course, several enabling teams can also have their own “enabling-teams community of practice!",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"it recognizes that building and running software systems is a sociotechnical activity, not an assembly line in a factory.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"The team API should explicitly consider usability by other teams: Will other teams find it easy and straightforward to interact with us, or will it be difficult and confusing? How easy will it be for a new team to get on board with our code and working practices? How do we respond to pull requests and other suggestions from other teams? Is our team backlog and product roadmap easily visible and understandable by other teams?",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"How much awareness does the HR department have about software systems? Does the group of department leaders deciding how to allocate budget across teams know of the likely effects of their choices on the viability of the software architecture? Given that there is increasing evidence for the homomorphism behind Conway’s law, it is very ineffective (perhaps irresponsible) for organizations that build software systems to decide on the shape, responsibilities, and boundaries of teams without input from technical leaders. Organization design and software design are, in practice, two sides of the same coin, and both need to be undertaken by the same informed group of people. Allan Kelly’s view of a software architect’s role expands further on this idea: More than ever I believe that someone who claims to be an Architect needs both technical and social skills, they need to understand people and work within the social framework. They also need a remit that is broader than",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Fundamentally, we need to involve technical people in organization design because they understand key software design concepts, such as APIs and interfaces, abstraction, encapsulation, and so on. Naomi Stanford puts it like this: “departments and divisions, systems, and business processes . . . can be designed independently as long as interfaces and boundaries with the wider organization form part of the design.”13",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"As Fernando Cornago, Senior Director of Platform Engineering, and Markus Rautert, Vice President of Platform Engineering and Architecture, explained their IT department went from being seen as a cost center, with a single vendor providing most of the software (requiring frequent hand-offs) and only a few in-house engineers (doing more managing than engineering), to a product-oriented team organization. Adidas invested 80% of its engineering resources to creating in-house software delivery capabilities via cross-functional",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"If we stress the team by giving it responsibility for part of the system that is beyond its cognitive load capacity, it ceases to act like a high-performing unit and starts to behave like a loosely associated group of individuals, each trying to accomplish their individual tasks without the space to consider if those are in the team’s best interest.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Many organizations assume that more communication is always better, but this is not really the case. What we need is focused communication between specific teams.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
Choose software architectures that encourage team-scoped flow.,Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Limiting communication paths to well-defined team interactions produces modular, decoupled systems.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Instead of choosing between a monolithic architecture or a microservices architecture, design the software to fit the maximum team cognitive load. Only then can we hope to achieve sustainable, safe, rapid software delivery. This team-first approach to software boundaries leads to favoring certain styles of software architecture, such as small, decoupled services.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
Conway’s law: “Organizations which design systems . . . are constrained to produce designs which are copies of the communication structures of these organizations.”6,Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"To stay alive in ever more competitive markets, organizations need teams and people who are able to sense when context changes and evolve accordingly.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"However, in a highly collaborative context filled with uncertainty over outcomes, relying on the org chart as a principal mechanism of splitting the work to be done leads to unrealistic expectations.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"This quote from Ruth Malan provides what could be seen as the modern version of Conway’s law: “If the architecture of the system and the architecture of the organization are at odds, the architecture of the organization wins.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Broadly speaking, for effective delivery and operations of modern software systems, organizations should attempt to minimize intrinsic cognitive load (through training, good choice of technologies, hiring, pair programming, etc.) and eliminate extraneous cognitive load altogether (boring or superfluous tasks or commands that add little value to retain in the working memory and can often be automated away), leaving more space for germane cognitive load (which is where the “value add” thinking lies).",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
we need a team-first software architecture that maximizes people’s ability to work with it.,Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"When measuring cognitive load, what we really care about is the domain complexity—how complex is the problem that we’re trying to solve with software?",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
​•​Stream-aligned team ​•​Enabling team ​•​Complicated-subsystem team ​•​Platform team,Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Fast flow requires restricting communication between teams. Team collaboration is important for gray areas of development, where discovery and expertise is needed to make progress. But in areas where execution prevails—not discovery—communication becomes an unnecessary overhead.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"A complicated-subsystem team is responsible for building and maintaining a part of the system that depends heavily on specialist knowledge, to the extent that most team members must be specialists in that area of knowledge in order to understand and make changes to the subsystem. The goal of this team is to reduce the cognitive load of stream-aligned teams working on systems that include or use the complicated subsystem. The team handles the subsystem complexity via specific capabilities and expertise that are typically hard to find or grow.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"An obsession with “feature delivery” ignores the human-related and team-related dynamics inherent in modern software, leading to a lack of engagement from staff, especially when the cognitive load is exceeded.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Conway’s law tells us that we need to understand what software architecture is needed before we organize our teams, otherwise the communication paths and incentives in the organization will end up dictating the software architecture. As Michael Nygard says: “Team assignments are the first draft of the architecture.”7",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"If we accept that the self-similar force (between architecture and team organization) described by Conway is real, then we also need to accept that anyone who makes decisions about the shape and placement of engineering teams is strongly influencing the software systems architecture. There is a logical implication of Conway’s law here, in the words of Ruth Malan: “if we have managers deciding . . . which services will be built, by which teams, we implicitly have managers deciding on the system architecture.”11",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"If the organization has an expectation that “everyone should see every message in the chat” or “everyone needs to attend the massive standup meetings” or “everyone needs to be present in meetings” to approve decisions, then we have an organization design problem. Conway’s law suggests that this kind of many-to-many communication will tend to produce monolithic, tangled, highly coupled, interdependent systems that do not support fast flow. More communication is not necessarily a good thing.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Clarity of business vision: the executive or leadership provides a clear, non-conflicting vision and direction for the rest of the organization, with horizons at human-relevant timescales (such as three months, six months, twelve months) and clear reasoning behind the priorities, so people in the organization can understand how and why these were chosen.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"Ideally, teams should be long lived and autonomous, with engaged team members. However, teams don’t live in isolation. They need to understand how and when to interact with each other. And these team interactions need to evolve over time to support the distinct phases of discovery and execution that products and technology go through during their lifetimes. In short, organizations not only need to strive for autonomous teams, they also need to continuously think about and evolve themselves in order to deliver value quickly to customers.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
"we must shift our thinking from treating teams as collections of interchangeable individuals that will succeed as long as they follow the “right” process and use the “right” tools, to treating people and technology as a single human/computer carbon/silicon sociotechnical ecosystem.",Team Topologies: Organizing Business and Technology Teams for Fast Flow,Matthew Skelton,[]
